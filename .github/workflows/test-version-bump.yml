name: Test Version Bump

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - no_bump

jobs:
  test-version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Create test commits
        run: |
          # Configure git for testing
          git config --local user.email "test@github.com"
          git config --local user.name "Test User"

          # Create test commit based on scenario
          TEST_SCENARIO="${{ github.event.inputs.test_scenario }}"

          case $TEST_SCENARIO in
            "patch")
              echo "Creating fix commit for patch bump test"
              echo "test fix" > test-fix.txt
              git add test-fix.txt
              git commit -m "fix: test patch bump"
              ;;
            "minor")
              echo "Creating feature commit for minor bump test"
              echo "test feature" > test-feature.txt
              git add test-feature.txt
              git commit -m "feat: test minor bump"
              ;;
            "major")
              echo "Creating breaking change commit for major bump test"
              echo "test breaking" > test-breaking.txt
              git add test-breaking.txt
              git commit -m "feat!: test major bump"
              ;;
            "no_bump")
              echo "Creating chore commit for no bump test"
              echo "test chore" > test-chore.txt
              git add test-chore.txt
              git commit -m "chore: test no bump"
              ;;
          esac

      - name: Get latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1 || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get commits since last tag
        id: get-commits
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze conventional commits
        id: analyze-commits
        run: |
          COMMITS="${{ steps.get-commits.outputs.commits }}"
          HAS_BREAKING=false
          HAS_FEATURE=false
          HAS_FIX=false

          while IFS= read -r commit; do
            # Check for breaking changes
            if [[ "$commit" == *"BREAKING CHANGE"* ]] || [[ "$commit" == *"!:"* ]]; then
              HAS_BREAKING=true
            fi
            
            # Parse conventional commit format
            if [[ "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+?\))?(!)?: ]]; then
              TYPE="${BASH_REMATCH[1]}"
              HAS_EXCLAMATION="${BASH_REMATCH[3]}"
              
              if [ "$HAS_EXCLAMATION" = "!" ]; then
                HAS_BREAKING=true
              fi
              
              if [ "$TYPE" = "feat" ]; then
                HAS_FEATURE=true
              fi
              
              if [ "$TYPE" = "fix" ]; then
                HAS_FIX=true
              fi
            fi
          done <<< "$COMMITS"

          if [ "$HAS_BREAKING" = true ]; then
            BUMP_TYPE="major"
          elif [ "$HAS_FEATURE" = true ]; then
            BUMP_TYPE="minor"
          elif [ "$HAS_FIX" = true ]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="none"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: calculate-version
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"

          # Remove 'v' prefix for version calculation
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          elif [ "$BUMP_TYPE" = "patch" ]; then
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          else
            NEW_VERSION="$VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Validate test results
        run: |
          TEST_SCENARIO="${{ github.event.inputs.test_scenario }}"
          BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
          NEW_VERSION="${{ steps.calculate-version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"

          echo "Test scenario: $TEST_SCENARIO"
          echo "Detected bump type: $BUMP_TYPE"
          echo "Current version: $LATEST_TAG"
          echo "Calculated new version: $NEW_VERSION"

          # Validate expected results
          case $TEST_SCENARIO in
            "patch")
              if [ "$BUMP_TYPE" != "patch" ]; then
                echo "❌ Expected patch bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "minor")
              if [ "$BUMP_TYPE" != "minor" ]; then
                echo "❌ Expected minor bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "major")
              if [ "$BUMP_TYPE" != "major" ]; then
                echo "❌ Expected major bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "no_bump")
              if [ "$BUMP_TYPE" != "none" ]; then
                echo "❌ Expected no bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
          esac

          echo "✅ Test passed! Bump type correctly detected as $BUMP_TYPE"

      - name: Cleanup test files
        if: always()
        run: |
          # Clean up test files
          rm -f test-*.txt
          git add -A
          git commit -m "chore: cleanup test files" || true
