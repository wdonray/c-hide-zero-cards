name: Test Version Bump

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - no_bump

jobs:
  test-version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Create test commit
        run: |
          # Create test commit based on scenario
          TEST_SCENARIO="${{ github.event.inputs.test_scenario }}"

          case $TEST_SCENARIO in
            "patch")
              echo "Creating fix commit for patch bump test"
              echo "test fix" > test-fix.txt
              git add test-fix.txt
              git commit -m "fix: test patch bump"
              ;;
            "minor")
              echo "Creating feature commit for minor bump test"
              echo "test feature" > test-feature.txt
              git add test-feature.txt
              git commit -m "feat: test minor bump"
              ;;
            "major")
              echo "Creating breaking change commit for major bump test"
              echo "test breaking" > test-breaking.txt
              git add test-breaking.txt
              git commit -m "feat!: test major bump"
              ;;
            "no_bump")
              echo "Creating chore commit for no bump test"
              echo "test chore" > test-chore.txt
              git add test-chore.txt
              git commit -m "chore: test no bump"
              ;;
          esac

      - name: Determine version bump type
        id: version-type
        run: |
          COMMIT_MESSAGE="$(git log -1 --pretty=format:"%s")"

          # Check for breaking changes
          if [[ "$COMMIT_MESSAGE" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MESSAGE" == *"!:"* ]]; then
            echo "newversion=major" >> $GITHUB_OUTPUT
            echo "Bump type: major (breaking change detected)"
          elif [[ "$COMMIT_MESSAGE" =~ ^feat: ]]; then
            echo "newversion=minor" >> $GITHUB_OUTPUT
            echo "Bump type: minor (feature commit detected)"
          elif [[ "$COMMIT_MESSAGE" =~ ^fix: ]]; then
            echo "newversion=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (fix commit detected)"
          else
            echo "newversion=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (default for non-conventional commits)"
          fi

      - name: Validate test results
        run: |
          TEST_SCENARIO="${{ github.event.inputs.test_scenario }}"
          BUMP_TYPE="${{ steps.version-type.outputs.newversion }}"

          echo "Test scenario: $TEST_SCENARIO"
          echo "Detected bump type: $BUMP_TYPE"

          # Validate expected results
          case $TEST_SCENARIO in
            "patch")
              if [ "$BUMP_TYPE" != "patch" ]; then
                echo "❌ Expected patch bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "minor")
              if [ "$BUMP_TYPE" != "minor" ]; then
                echo "❌ Expected minor bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "major")
              if [ "$BUMP_TYPE" != "major" ]; then
                echo "❌ Expected major bump, got $BUMP_TYPE"
                exit 1
              fi
              ;;
            "no_bump")
              if [ "$BUMP_TYPE" != "patch" ]; then
                echo "❌ Expected patch bump (default), got $BUMP_TYPE"
                exit 1
              fi
              ;;
          esac

          echo "✅ Test passed! Bump type correctly detected as $BUMP_TYPE"

      - name: Cleanup test files
        if: always()
        run: |
          # Clean up test files
          rm -f test-*.txt
          git add -A
          git commit -m "chore: cleanup test files" || true
