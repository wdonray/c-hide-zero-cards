name: Version Bump

on:
  push:
    branches:
      - main

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1 || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get commits since last tag
        id: get-commits
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze conventional commits
        id: analyze-commits
        run: |
          COMMITS="${{ steps.get-commits.outputs.commits }}"
          HAS_BREAKING=false
          HAS_FEATURE=false
          HAS_FIX=false

          while IFS= read -r commit; do
            # Check for breaking changes
            if [[ "$commit" == *"BREAKING CHANGE"* ]] || [[ "$commit" == *"!:"* ]]; then
              HAS_BREAKING=true
            fi
            
            # Parse conventional commit format
            if [[ "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+?\))?(!)?: ]]; then
              TYPE="${BASH_REMATCH[1]}"
              HAS_EXCLAMATION="${BASH_REMATCH[3]}"
              
              if [ "$HAS_EXCLAMATION" = "!" ]; then
                HAS_BREAKING=true
              fi
              
              if [ "$TYPE" = "feat" ]; then
                HAS_FEATURE=true
              fi
              
              if [ "$TYPE" = "fix" ]; then
                HAS_FIX=true
              fi
            fi
          done <<< "$COMMITS"

          if [ "$HAS_BREAKING" = true ]; then
            BUMP_TYPE="major"
          elif [ "$HAS_FEATURE" = true ]; then
            BUMP_TYPE="minor"
          elif [ "$HAS_FIX" = true ]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="none"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: calculate-version
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"

          # Remove 'v' prefix for version calculation
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          elif [ "$BUMP_TYPE" = "patch" ]; then
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          else
            NEW_VERSION="$VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Check if version bump is needed
        id: check-bump
        run: |
          CURRENT_VERSION="${{ steps.get-latest-tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.calculate-version.outputs.new_version }}"

          if [ "v$NEW_VERSION" = "$CURRENT_VERSION" ]; then
            echo "needs_bump=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          else
            echo "needs_bump=true" >> $GITHUB_OUTPUT
            echo "Version bump needed: $CURRENT_VERSION -> v$NEW_VERSION"
          fi

      - name: Bump version and create tag
        if: steps.check-bump.outputs.needs_bump == 'true'
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new_version }}"

          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit changes
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [deploy]"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

          echo "Version bumped to $NEW_VERSION and deployed"
